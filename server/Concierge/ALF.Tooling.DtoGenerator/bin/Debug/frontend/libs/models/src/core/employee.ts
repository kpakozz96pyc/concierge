
import { BankTransferHeapPaymentType } from "../transfers/enums/bank-transfer-heap-payment-type";
import { PaySlipMediaType } from "./enums/pay-slip-media-type";
import { PaySlipLanguage } from "./enums/pay-slip-language";
import { IncomeOverviewMediaType } from "./enums/income-overview-media-type";
import { VacationPayBasisType } from "./enums/vacation-pay-basis-type";
import { BreadWinnerType } from "./enums/bread-winner-type";
import { EmployeeWorkCategoryType } from "./enums/employee-work-category-type";
import { EmployeeSeveranceType } from "./enums/employee-severance-type";
import { TaxInformationDeductionType } from "../tax/enums/tax-information-deduction-type";
import { EmploymentId } from "./employment";

// ######################################################
// ## NOTE! This is an auto-generated file.            ##
// ######################################################

export type EmployeeId = string;

export class Employee {

    static $name = "Employee";
    static typeNameHint = "ALF.Shared.Dto.Models.Core.Employee, ALF.Shared.Dto"

    id: EmployeeId;
    companyId?: string;
    employeeNumber: number;
    employments: string[] = [];
    isSynchronizedWithExternalSystem: boolean;
    name?: string;
    address1?: string;
    address2?: string;
    countryCode?: string;
    postalCode?: string;
    emailWork?: string;
    emailPrivate?: string;
    privatePhoneNumber?: string;
    bankAccountNumber1?: string;
    paymentMethod1: BankTransferHeapPaymentType;
    bankAccountNumber2?: string;
    paymentMethod2: BankTransferHeapPaymentType;
    bankAccountNumber3?: string;
    paymentMethod3: BankTransferHeapPaymentType;
    bankAccountSwift1?: string;
    bankAccountSwift2?: string;
    bankAccountSwift3?: string;
    bankAccount1CountryCode?: string;
    bankAccount2CountryCode?: string;
    bankAccount3CountryCode?: string;
    bankAccount1Code?: string;
    bankAccount2Code?: string;
    bankAccount3Code?: string;
    bankAccount2PaymentAmount?: number;
    bankAccount3PaymentAmount?: number;
    socialSecurityNumber?: string;
    socialOfficeNumberCode?: number;
    referenceEmploymentId: EmploymentId;
    rate1?: number;
    rate2?: number;
    rate3?: number;
    maritalStatus?: any;
    mainEducationLevel?: number;
    gender?: string;
    taxCardCountyNumber?: number;
    weeklyWorkHours?: number;
    totalPositionPercentage?: number;
    publicEmployerEmployeeRegisterCode?: number;
    employmentDate?: Date;
    terminationDate?: Date;
    organizationCode?: string;
    setAsideVacationPay: boolean;
    dateOfBirth?: Date;
    isInternationalIdInUse?: boolean;
    internationalIdCountryCode?: string;
    internationalIdTaxIdNumber?: string;
    internationalIdSocialSecurityNumber?: string;
    internationalIdVATNumber?: string;
    internationalIdPassportNumber?: string;
    privateMobilePhoneNumber?: string;
    workMobilePhoneNumber?: string;
    paySlipMedia: PaySlipMediaType;
    paySlipLanguage: PaySlipLanguage;
    incomeOverviewMedia: IncomeOverviewMediaType;
    vacationPayBasis: VacationPayBasisType;
    collectVacationDaysStartDate?: Date;
    externalId?: string;
    breadWinner: BreadWinnerType;
    statisticValue1?: string;
    statisticValue2?: string;
    taxInformationDeductionType?: TaxInformationDeductionType;
    overriddenTaxationPercentage?: number;
    additionalTaxationAmount?: number;
    isSecondaryEmployer?: boolean;
    paySalaryBeyondEmployerPeriod?: boolean;
    acceptedExemptionEmployerPeriodStartDate?: Date;
    acceptedExemptionEmployerPeriodEndDate?: Date;
    extendedQuotaChildrensChronicSicknessStartDate?: Date;
    extendedQuotaChildrensChronicSicknessEndDate?: Date;
    extendedQuotaChildrensChronicSickness?: number;
    extendedQuotaSelfReportedSickLeaveStartDate?: Date;
    extendedQuotaSelfReportedSickLeaveEndDate?: Date;
    weeklyWorkingDays?: number;
    paymentType?: number;
    workCategory: EmployeeWorkCategoryType;
    severance: EmployeeSeveranceType;
    taxationResidentOfCountry?: string;
    reportPensionStatus?: string;
    pensionCode?: any;
    pensionCode1?: any;
    pensionCode2?: any;
    formerPensionPlan?: string;
    deviatingPensionAgreement?: string;
    receivesDisabilityPension?: boolean;
    pensionDate?: Date;
    immediateManagerEmployeeId?: string;
    immediateManagerLastname?: string;
    immediateManagerFirstname?: string;
    immediateManagerSocialSecurityNumber?: string;
    immediateManagerMobile?: string;
    immediateManagerEmail?: string;
    currencyCode1?: string;
    currencyCode2?: string;
    currencyCode3?: string;
    taxBenefits?: number;
    degreeOfDisability?: number;
    corePersonId?: string;
    currentValuesTimestamp: Date;
    currentRecordTimestamp: Date;
    image?: string;
    note?: string;
    externalPersonKey?: string;
    externalEmployeeKey?: string;
    freevar5?: any;
    freevar6?: any;
    freefield1?: any;
    freefield2?: any;
    freefield3?: any;
    freefield4?: any;
    freeFieldA1?: any;
    freeFieldA2?: any;
    freeFieldA3?: any;
    freeFieldA4?: any;
    freeFieldA5?: any;
    freeFieldA6?: any;
    freeFieldA7?: any;
    freeFieldA8?: any;
    freeFieldA9?: any;
    freeFieldA10?: any;
    freeFieldA11?: any;
    freeFieldA12?: any;
    freeFieldA13?: any;
    freeFieldA14?: any;
    freeFieldA15?: any;
    freeFieldB1?: any;
    freeFieldB2?: any;
    freeFieldB3?: any;
    freeFieldB4?: any;
    freeFieldB5?: any;
    freeFieldB6?: any;
    freeFieldB7?: any;
    freeFieldB8?: any;
    freeFieldB9?: any;
    freeFieldB10?: any;
    freeFieldB11?: any;
    freeFieldB12?: any;
    freeFieldB13?: any;
    freeFieldB14?: any;
    freeFieldB15?: any;
    freeFieldB18?: any;
    freeFieldB19?: any;
    freeFieldB20?: any;
    freeFieldB21?: any;
    freeFieldB22?: any;
    freeFieldB23?: any;
    freeFieldB24?: any;
    freeFieldB25?: any;
    freeFieldB26?: any;
    freeFieldB27?: any;
    freeFieldB28?: any;
    freeFieldB29?: any;
    freeFieldB30?: any;
    freeFieldB31?: any;
    freeFieldB32?: any;
    freeFieldB33?: any;
    freeFieldB34?: any;
    freeFieldB35?: any;
    freeFieldC6?: any;
    freeFieldC7?: any;
    freeFieldC8?: any;
    freeFieldD1?: any;
    freeFieldD2?: any;
    freeFieldE1?: any;
    freeFieldE2?: any;
    freeFieldE3?: any;
    freeFieldE4?: any;
    freeFieldE5?: any;
    freeFieldE6?: any;
    freeFieldE7?: any;
    freeFieldE8?: any;
    freeFieldE9?: any;
    freeFieldE10?: any;
    freeFieldE11?: any;
    freeFieldE12?: any;
    freeFieldE13?: any;
    freeFieldE14?: any;
    freeFieldE15?: any;
    freeFieldE17?: any;
    freeFieldE18?: any;
    freeFieldE19?: any;
    freeFieldE20?: any;
    freeFieldE21?: any;
    freeFieldE22?: any;
    freeFieldE23?: any;
    freeFieldE24?: any;
    freeFieldE25?: any;
    freeFieldF1?: any;
    freeFieldF2?: any;
    freeFieldF3?: any;
    freeFieldF4?: any;
    freeFieldF5?: any;
    freeFieldF6?: any;
    freeFieldF7?: any;
    freeFieldF8?: any;
    freeFieldF9?: any;
    freeFieldF10?: any;
    freeFieldF11?: any;
    freeFieldF12?: any;
    freeFieldF13?: any;
    freeFieldF14?: any;
    freeFieldF15?: any;

    constructor(data?: Partial<Employee>) {
        Object.assign(this, data);
    }
}
