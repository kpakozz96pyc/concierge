
import { PayCodeAllowedTransactionType } from "./enums/pay-code-allowed-transaction-type";
import { PayCodeLogType } from "./enums/pay-code-log-type";
import { PayCodeAGAFeeType } from "./enums/pay-code-agafee-type";
import { PayCodeTaxationBasisType } from "./enums/pay-code-taxation-basis-type";
import { PayCodeOverrideTaxationType } from "./enums/pay-code-override-taxation-type";
import { TransactionValueField } from "./enums/transaction-value-field";
import { InvertTransactionAction } from "./enums/invert-transaction-action";
import { PayCodeNetSalaryBasisType } from "./enums/pay-code-net-salary-basis-type";
import { PayCodeVacationBasisType } from "./enums/pay-code-vacation-basis-type";
import { PayCodePaymentType } from "./enums/pay-code-payment-type";
import { PayCodePaymentAccountType } from "./enums/pay-code-payment-account-type";
import { NonMonetaryTransferCode } from "../pay-codes/enums/non-monetary-transfer-code";
import { PayCodeDeductionType } from "./enums/pay-code-deduction-type";
import { CalculationCode } from "../pay-codes/enums/calculation-code";
import { ReimbursementInclusion } from "../pay-codes/enums/reimbursement-inclusion";
import { PayCodeBasisType } from "./enums/pay-code-basis-type";
import { PayCodeMaskBehavior } from "./enums/pay-code-mask-behavior";
import { AdditionalInformation } from "../additional-information/additional-information";
import { PayCodeLinkId } from "../pay-codes/pay-code-link";

// ######################################################
// ## NOTE! This is an auto-generated file.            ##
// ######################################################

export type PayCodeId = string;

export class PayCode {

    static $name = "PayCode";
    static typeNameHint = "ALF.Shared.Dto.Models.Core.PayCode, ALF.Shared.Dto"

    id: PayCodeId;
    companyId: string;
    payCodeNumber: number;
    isDeduction: boolean;
    isPayable: boolean;
    isTax: boolean;
    isPersonalOnly: boolean;
    deductionOwnerId?: string;
    links: PayCodeLinkId[] = [];
    description?: string;
    allowedTransactionType: PayCodeAllowedTransactionType;
    logType: PayCodeLogType;
    isBalance: boolean;
    agaFeeCode: PayCodeAGAFeeType;
    taxationBasisCode: PayCodeTaxationBasisType;
    overrideTaxationCode: PayCodeOverrideTaxationType;
    isSvalbardTaxation: boolean;
    isSeafarersDeduction: boolean;
    includedInBasisForAFP: boolean;
    netSalaryBasisCode?: PayCodeNetSalaryBasisType;
    vacationBasisCode1?: PayCodeVacationBasisType;
    vacationBasisCode2?: PayCodeVacationBasisType;
    vacationBasisCode3?: PayCodeVacationBasisType;
    generateVacationDeductionCode: number;
    vacationDeductionPayCodeNumber: number;
    paymentTypeCode?: PayCodePaymentType;
    paymentAccountCode?: PayCodePaymentAccountType;
    transferAccountingCode?: boolean;
    copyActivityCodeFromEmployment?: boolean;
    transactionAccountingId?: string;
    transactionOffsettAccountingCode?: string;
    accountingDescriptionCode: number;
    nonMonetaryTransferCode?: NonMonetaryTransferCode;
    transactionHoursAccountingCode?: string;
    transactionNumbersAccountingCode?: string;
    updateYearlyTotalsCode: number;
    accumulateHoursCode: number;
    overTimeGroupCode: number;
    includeInFixedSalaryCode: boolean;
    reduceFixedSalaryCode: number;
    terminationNoticeCode: number;
    deductionTypeCode?: PayCodeDeductionType;
    getDeductionOwnerFromCode: number;
    deductionOwnerCode: number;
    partialCalculationRecurring?: boolean;
    partialCalculationVariable?: boolean;
    partialCalculationAmount?: boolean;
    partialCalculationHours?: boolean;
    partialCalculationNumbers?: boolean;
    calculationCode?: CalculationCode;
    deviatingCalculationCode?: string;
    payCodeAdjustBalance: number;
    electronicCommunicationUsageCode: number;
    companyCarCompensationCode: number;
    dependencyCode: number;
    roundingRuleCode: number;
    regulativeRateACode: number;
    regulativeRateBCode: number;
    employeeRateCode: number;
    rateBasisCode: number;
    rateBasisTableCode: number;
    rateBasisFieldCode: number;
    rateBasisTableUsageCode: number;
    rateTableCode: number;
    ratePercentage?: number;
    rateAccumulatorPercentage?: number;
    rateMinimum?: number;
    rateMaximum?: number;
    payCodeRate?: number;
    rateOffsetCode: number;
    basisAquiredFromCode: number;
    basisTableAquiredFromCode: number;
    basisFieldAquiredFromCode: number;
    basisTableAquiredFromUsageCode: number;
    basisRateTableAquiredFromCode: number;
    hoursAquiredFromCode: number;
    hoursTableAquiredFromCode: number;
    hoursFieldAquiredFromCode: number;
    hoursTableAquiredFromUsageCode: number;
    hoursRateTableAquiredFromCode: number;
    numbersAquiredFromCode: number;
    numbersTableAquiredFromCode: number;
    numbersFieldAquiredFromCode: number;
    numbersTableAquiredFromUsageCode: number;
    numbersRateTableAquiredFromCode: number;
    allowAttachmentInCustomerPortal: boolean;
    allowAttachmentInManagerPortal: boolean;
    allowAttachmentInEmployeePortal: boolean;
    allowAttachmentInPayrollPortal: boolean;
    allowAttachmentInImport: boolean;
    requiredAttachmentInWebTrans: boolean;
    requiredAttachmentInVariableTrans: boolean;
    requiredAttachmentInFixedTrans: boolean;
    accumulatorBasis: { [key: string]: PayCodeBasisType } = {};
    calculationBasis: { [key: string]: PayCodeBasisType } = {};
    salaryReportCode1: number;
    salaryReportCode2: number;
    salaryReportCode3: number;
    salaryReportCode4: number;
    salaryReportCode5: number;
    salaryReportCode6: boolean;
    salaryReportCode10: number;
    visibilityInSalaryCardCode: boolean;
    pensionKLPCode: number;
    statisticsSSBCode: number;
    nrfReportCode: number;
    statisticsSSTCode: number;
    paiReportCode: number;
    navoActionCode?: string;
    pensionPaymentReportingCode: number;
    pensionInsuranceReportCode: number;
    pensionStatusReportCode: number;
    importReversalCode1: TransactionValueField;
    importReversalActionCode1: InvertTransactionAction;
    importReversalStopAfter1?: boolean;
    importReversalCode2: TransactionValueField;
    importReversalActionCode2: InvertTransactionAction;
    importReversalStopAfter2?: boolean;
    importReversalCode3: TransactionValueField;
    importReversalActionCode3: InvertTransactionAction;
    importReversalStopAfter3?: boolean;
    importReversalCode4: TransactionValueField;
    importReversalActionCode4: InvertTransactionAction;
    importHoursActionCode?: string;
    linkTriggerCode: number;
    showZeroTransactionsOnSlipCode: number;
    accumulateTransactionsOnSlipCode?: string;
    showAccumulatedNumbersOnSlipCode: number;
    showAccumulatedHoursOnSlipCode: number;
    showAccumulatedRatesOnSlipCode: number;
    showAccumulatedBasisOnSlipCode: number;
    showYearToDateOnSlipCode: number;
    showYearToDateNumbersOnSlip?: boolean;
    showYearToDateHoursOnSlip?: boolean;
    personalTransactionCode?: boolean;
    backPaymentPayCode: number;
    travelCode?: string;
    extraTime?: boolean;
    voucherReferanceAccessCode: number;
    textFieldAccessCode: number;
    servicePayCode?: boolean;
    reimbursementInclusionCode?: ReimbursementInclusion;
    adjustAmountForGradedMaturnaty: boolean;
    roundingDDAM: number;
    statisticsCode1?: string;
    statisticsCode2?: string;
    statisticsCode3?: string;
    statisticsCode4?: string;
    aMeldingShouldReport: boolean;
    aMeldingReportTypeCode: number;
    aMeldingSailor24hOnBoardCode: number;
    aMeldingOverstyrtRapporteringAvSkatteregel?: string;
    aMeldingOverstyrtRapporteringAvTrekkplikt: number;
    aMeldingIncomeTypeCode?: string;
    aMeldingAdvantageCode?: string;
    aMeldingDescriptionCode?: string;
    aMeldingReportNumbersCode: number;
    aMeldingDemandsSpesification?: boolean;
    aMeldingOpptjHjelpefartoy?: boolean;
    aMeldingBrukSkattemessigBosattILand?: boolean;
    aMeldingErOpptjentPaaKontinentalsokkel: number;
    aMeldingHentOpptjeningsLand?: boolean;
    aMeldingUseAdditionalInformation?: boolean;
    aMeldingAdditionalInformationTypeCode?: string;
    aMeldingAdditionalInformationSubTypeCode?: string;
    aMeldingAdditionalInformationSubTypeVersionCode?: string;
    additionalInformation: AdditionalInformation;
    masks: { [key: string]: PayCodeMaskBehavior } = {};
    linkTriggerBehavior: number;
    rateTableId?: string;
    basisTableId?: string;
    hoursTableId?: string;
    numberTableId?: string;
    ratePayCodeBalance: number;
    basisPayCodeBalance: number;
    hoursPayCodeBalance: number;
    numberPayCodeBalance: number;
    payslipText?: string;

    constructor(data?: Partial<PayCode>) {
        Object.assign(this, data);
    }
}
